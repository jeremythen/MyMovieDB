{
  "openapi": "3.0.0",
  "info": {
    "description": "This is the MyMovieDB API definition",
    "version": "1.0.0",
    "title": "MyMovieDB",
    "contact": {
      "email": "jeremythen16@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "movies",
      "description": "Manage Movies"
    },
    {
      "name": "users",
      "description": "User information"
    },
    {
      "name": "actors"
    },
    {
      "name": "directors"
    }
  ],
  "paths": {
    "/movies": {
      "get": {
        "tags": ["movies"],
        "summary": "Get all movies",
        "operationId": "getMovies",
        "description": "Get all the movies. Anybody, logged in or not can call this endpoint.",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved movies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/GetMoviesResponse"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnkownError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["movies"],
        "summary": "Creates a movie",
        "description": "Create a movie. Only the admin can access this endpoint.",
        "operationId": "createMovie",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer authorization token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer jwttoken"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MovieCreationPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created movie",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddMovieResponse"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "appliation/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyMovieDbBadResponse"
                }
              }
            }
          }
        }
      }
    },
    "/movies/{id}": {
      "get": {
        "tags": ["movies"],
        "summary": "Get a movie by id",
        "description": "Get a movie by the specified id.",
        "operationId": "getMovieById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved movie specified by that id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMovieByIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "appliation/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyMovieDbBadResponse"
                }
              }
            }
          }
        }
      }
    },
    "/movies/{id}/reviews": {
      "get": {
        "tags": ["movies"],
        "summary": "Get a review by it's id",
        "operationId": "getReviewById",
        "description": "Get a review by the specified reviewId",
        "security": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved movie's reviews",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetMovieReviewsResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Etc",
            "content": {
              "appliation/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevieBadResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["movies"],
        "summary": "Add a review to a movie",
        "description": "Add a review to a movie specified by it's id. Any logged in user can access this endpoint. A user can only add a review to one specific movie. If the user tries to add a review to the same movie, the previous review will be overriden by the new review.",
        "operationId": "addMovieReview",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer authorization token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer jwttoken"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddReviewPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created movie",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddReviewResponse"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "appliation/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyMovieDbBadResponse"
                }
              }
            }
          }
        }
      }
    },
    "/movies/{id}/disable": {
      "put": {
        "tags": ["movies"],
        "summary": "Diactivates the movie",
        "operationId": "diactivateMovie",
        "description": "Diactivates the movie specified by the id. After this, the movie will not be visible. Only an admin can access this endpoint",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The movie id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer authorization token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer jwttoken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated movie",
            "content": {
              "appliation/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisableMovieResponse"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "appliation/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisableMovieBadResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/movies/pagination/offset/{offset}": {
      "get": {
        "tags": ["movies"],
        "summary": "Get all movies after offset count movie record",
        "operationId": "getPaginatedMoviesOffset",
        "description": "Get all the movies that are after the movie with the offset position",
        "security": [],
        "parameters": [
          {
            "name": "offset",
            "in": "path",
            "required": true,
            "description": "The offset from where to get movies",
            "example": 5,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved movies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetMoviesResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnkownError"
                }
              }
            }
          }
        }
      }
    },
    "/movies/pagination/limit/{limit}": {
      "get": {
        "tags": ["movies"],
        "summary": "Get movies up to limit count",
        "operationId": "getPaginatedMoviesLimit",
        "description": "Get movies up to limit count. If limit is 5, then up to 5 movies will be returned",
        "security": [],
        "parameters": [
          {
            "name": "limit",
            "in": "path",
            "required": true,
            "description": "The count limit to return",
            "example": 2,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved movies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetMoviesResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnkownError"
                }
              }
            }
          }
        }
      }
    },
    "/movies/pagination/offset/{offset}/limit/{limit}": {
      "get": {
        "tags": ["movies"],
        "summary": "Get movies after th especified offset and up to limit count",
        "operationId": "getPaginatedMoviesOffsetAndLimit",
        "description": "Get movies up to limit count. If limit is 5, then up to 5 movies will be returned, aafter the movie with the offset position",
        "security": [],
        "parameters": [
          {
            "name": "offset",
            "in": "path",
            "required": true,
            "description": "The offset from where to get movies",
            "example": 5,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "path",
            "required": true,
            "description": "The count limit to return",
            "example": 3,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved movies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetMoviesResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnkownError"
                }
              }
            }
          }
        }
      }
    },
    "/users/register": {
      "post": {
        "tags": ["users"],
        "security": [],
        "summary": "Register a user",
        "description": "Register a user. Any not logged in user can call this endpoint.",
        "operationId": "registerUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Register"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully registered user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/UserRegisterLoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnkownError"
                }
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["users"],
        "security": [],
        "summary": "User login",
        "description": "A logged out user calling this endpoint to login will receive a different JWT token each time. This endpoint will return a jwt token that the frontend will send for each other request as a logged in user.",
        "operationId": "loggingUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully registered user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/UserRegisterLoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnkownError"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["users"],
        "summary": "Get users",
        "description": "Get all users. Only ADMIN can all this endpoint.",
        "operationId": "getUsers",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer authorization token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer jwttoken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetUsersResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/users/{userName}": {
      "get": {
        "tags": ["users"],
        "summary": "Get a user",
        "description": "Get a user specified by userName. Only ADMIN can all this endpoint.",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "jeremythen"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer authorization token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer jwttoken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "tags": ["users"],
        "summary": "Deletes a user",
        "description": "Deletes a user with the specified userName. Only ADMIN can all this endpoint.",
        "operationId": "deleteUserById",
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "jeremythen"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer authorization token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer jwttoken"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "No content"
          },
          "400": {
            "description": "bad input parameter"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/users/{userName}/role/": {
      "put": {
        "tags": ["users"],
        "summary": "Add a role",
        "description": "Add a role to the specified userName. Only ADMIN can all this endpoint.",
        "operationId": "addUserRole",
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "jeremythen"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer authorization token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer jwttoken"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userName": {
                    "type": "string",
                    "example": "jeremythen"
                  },
                  "role": {
                    "type": "string",
                    "enum": ["USER", "ADMIN"],
                    "example": "ADMIN"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok"
          },
          "400": {
            "description": "bad input parameter"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/actors": {
      "get": {
        "tags": ["actors"],
        "summary": "Get all actors",
        "operationId": "getActors",
        "description": "Get the list of actors.",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved actors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionDirectorData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnkownError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["actors"],
        "summary": "Add an actor",
        "description": "Add an actor. Only the admin can access this endpoint.",
        "operationId": "addActor",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer authorization token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer jwttoken"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionDirectorCreationPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully added actor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionDirectorData"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "appliation/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddActorBadResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["actors"],
        "summary": "Deletes an actor",
        "description": "Deletes a director with the specified id. Only ADMIN can all this endpoint.",
        "operationId": "deleteActor",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": 5
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer authorization token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer jwttoken"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "No content"
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "appliation/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteActorBadResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/actors/{id}": {
      "get": {
        "tags": ["actors"],
        "summary": "Get an actor by id",
        "description": "Get an actor by the specified id.",
        "operationId": "getActorById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The actor id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved actor specified by that id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Actor"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "appliation/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteActorBadResponse"
                }
              }
            }
          }
        }
      }
    },
    "/directors": {
      "get": {
        "tags": ["directors"],
        "summary": "Get all directors",
        "operationId": "getDirectors",
        "description": "Get the list of directors.",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved directors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionDirectorData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnkownError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["directors"],
        "summary": "Add an director",
        "description": "Add a director. Only the admin can access this endpoint.",
        "operationId": "addDirector",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer authorization token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer jwttoken"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionDirectorCreationPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully added director",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionDirectorData"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "appliation/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddActorBadResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["directors"],
        "summary": "Deletes an director",
        "description": "Deletes a director with the specified id. Only ADMIN can all this endpoint.",
        "operationId": "deleteDirector",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": 5
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer authorization token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer jwttoken"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "No content"
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "appliation/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteActorBadResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/directors/{id}": {
      "get": {
        "tags": ["directors"],
        "summary": "Get an director by id",
        "description": "Get an director by the specified id.",
        "operationId": "getDirectorById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The director id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved director specified by that id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Actor"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "appliation/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteActorBadResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "components": {
    "responses": {
      "UnauthorizedError": {
        "description": "Access token is missing or invalid"
      },
      "MyMovieDbBadRequest": {
        "description": "Etc",
        "content": {
          "text/plain": {
            "schema": {
              "$ref": "#/components/schemas/MyMovieDbBadResponse"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Users": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "Jeremy"
          },
          "lastName": {
            "type": "string",
            "example": "Then"
          },
          "username": {
            "type": "string",
            "example": "jeremy"
          },
          "email": {
            "type": "string",
            "example": "jeremy@gmail.com"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "object",
              "enum": ["USER", "ADMIN"],
              "example": "ADMIN"
            }
          }
        }
      },
      "Register": {
        "type": "object",
        "required": ["name", "username", "email", "password"],
        "properties": {
          "firstName": {
            "type": "string",
            "example": "Jeremy"
          },
          "lastName": {
            "type": "string",
            "example": "Then"
          },
          "username": {
            "type": "string",
            "example": "jeremy"
          },
          "email": {
            "type": "string",
            "example": "jeremy@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "yourpass"
          }
        }
      },
      "RegisterUserResponsePayload": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 3
          },
          "firstName": {
            "type": "string",
            "example": "Jeremy"
          },
          "lastName": {
            "type": "string",
            "example": "Then"
          },
          "username": {
            "type": "string",
            "example": "jeremy"
          },
          "email": {
            "type": "string",
            "example": "jeremy@gmail.com"
          },
          "role": {
            "type": "string",
            "default": "USER",
            "example": "USER"
          }
        }
      },
      "Login": {
        "type": "object",
        "required": ["username", "password"],
        "properties": {
          "username": {
            "type": "string",
            "example": "jeremy"
          },
          "password": {
            "type": "string",
            "example": "yourpass"
          }
        }
      },
      "Movie": {
        "type": "object",
        "required": ["id", "title", "year", "time", "language", "distributor"],
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "title": {
            "type": "string",
            "example": "Avengers End Game",
            "default": "Avengers End Game"
          },
          "year": {
            "description": "The year of th emovie",
            "type": "integer",
            "example": 1,
            "default": 1
          },
          "time": {
            "description": "The duration of the movie in minutes",
            "type": "string",
            "example": 120
          },
          "language": {
            "description": "The language the movie is originally in",
            "type": "string",
            "example": "English"
          },
          "distributor": {
            "description": "The distributor of the movie",
            "type": "string",
            "example": "Universal Pictures"
          },
          "casts": {
            "description": "The list of actors staring in this movie",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Cast"
            }
          },
          "directores": {
            "description": "The directores of this movie",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Director"
            }
          },
          "genres": {
            "description": "The genres of this movie",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Genre"
            }
          }
        }
      },
      "MyMovieDbResponse": {
        "type": "object",
        "properties": {
          "data": {
            "description": "The data that was requested. null if any issue requesting it",
            "type": "string",
            "example": {
              "$ref": "#/components/schemas/Movie"
            },
            "default": {
              "$ref": "#/components/schemas/Movie"
            }
          },
          "success": {
            "description": "The requested operation was successful",
            "type": "boolean",
            "example": true
          },
          "errorCode": {
            "description": "An error code of an error that happened while requesting the data",
            "type": "string",
            "example": "MOVIE_INVALID_PAYLOAD"
          },
          "errorMessages": {
            "description": "The detailed message of the error that happened",
            "type": "array",
            "items": {
              "example": "No movie review payload was provided"
            }
          }
        }
      },
      "MyMovieDbBadResponse": {
        "type": "object",
        "properties": {
          "data": {
            "description": "The data that was requested. null if any issue requesting it",
            "type": "string",
            "example": null
          },
          "success": {
            "description": "The requested operation was successful",
            "type": "boolean",
            "example": false
          },
          "errorCode": {
            "description": "An error code of an error that happened while requesting the data",
            "type": "string",
            "example": "MOVIE_INVALID_PAYLOAD"
          },
          "errorMessages": {
            "description": "The detailed message of the error that happened",
            "type": "array",
            "items": {
              "example": "No movie review payload was provided"
            }
          }
        }
      },
      "Cast": {
        "type": "object",
        "required": ["actorId", "movieId", "role"],
        "properties": {
          "id": {
            "description": "The cast's id",
            "type": "integer",
            "example": 1
          },
          "actorId": {
            "type": "integer",
            "example": 2
          },
          "movieId": {
            "type": "integer",
            "example": 3
          },
          "role": {
            "description": "The role of this actor in the movie",
            "type": "string",
            "example": "Tony Stark"
          }
        }
      },
      "Actor": {
        "type": "object",
        "required": ["firstName", "lastName"],
        "properties": {
          "id": {
            "description": "The actor's id",
            "type": "integer",
            "example": 1
          },
          "firstName": {
            "type": "string",
            "example": "Jeremy"
          },
          "lastName": {
            "type": "string",
            "example": "Then"
          }
        }
      },
      "Director": {
        "type": "object",
        "required": ["firstName", "lastName"],
        "properties": {
          "id": {
            "description": "The director's id",
            "type": "integer",
            "example": 1
          },
          "firstName": {
            "type": "string",
            "example": "Jeremy"
          },
          "lastName": {
            "type": "string",
            "example": "Then"
          }
        }
      },
      "Genre": {
        "type": "object",
        "required": ["title"],
        "properties": {
          "id": {
            "type": "integer",
            "example": 2
          },
          "title": {
            "description": "The unique title of the genre.",
            "type": "string",
            "enum": ["ACTION", "ADVENTURE", "COMEDY", "CRIME"],
            "example": "ACTION"
          }
        }
      },
      "Review": {
        "type": "object",
        "required": ["movieId", "reviewerId", "reviewerStars"],
        "properties": {
          "id": {
            "description": "The registered user's id",
            "type": "integer",
            "example": 1
          },
          "movieId": {
            "type": "integer",
            "example": 5
          },
          "reviewerId": {
            "type": "integer",
            "example": 2
          },
          "reviewerStars": {
            "description": "The stars that the reviewer user is giving to this movie",
            "type": "integer",
            "example": 5,
            "default": 5
          },
          "comment": {
            "type": "string",
            "description": "The reviewer's or user's comment for this movie review",
            "example": "I'm voting 5 to this movie because it's awesome"
          }
        }
      },
      "AddReviewPayload": {
        "type": "object",
        "required": ["movieId", "reviewerId", "reviewerStars"],
        "properties": {
          "movieId": {
            "type": "integer",
            "example": 5
          },
          "reviewerId": {
            "type": "integer",
            "example": 2
          },
          "reviewerStars": {
            "description": "The stars that the reviewer user is giving to this movie",
            "type": "integer",
            "example": 5,
            "default": 5
          },
          "comment": {
            "type": "string",
            "description": "The reviewer's or user's comment for this movie review",
            "example": "I'm voting 5 to this movie because it's awesome"
          }
        }
      },
      "Reviewer": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "id": {
            "description": "The actor's id",
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Jeremy Then"
          }
        }
      },
      "MovieCreationPayload": {
        "type": "object",
        "required": ["title", "year", "time"],
        "properties": {
          "title": {
            "type": "string",
            "example": "Avengers End Game",
            "default": "Avengers End Game"
          },
          "year": {
            "description": "The year of th emovie",
            "type": "integer",
            "example": 1,
            "default": 1
          },
          "time": {
            "description": "The duration of the movie in minutes",
            "type": "string",
            "example": 120
          },
          "language": {
            "description": "The language the movie is originally in",
            "type": "string",
            "example": "English"
          },
          "distributor": {
            "description": "The distributor of the movie",
            "type": "string",
            "example": "Universal Pictures"
          }
        }
      },
      "NewMovieCreated": {
        "type": "object",
        "required": ["title", "year", "time"],
        "properties": {
          "id": {
            "description": "The id of the newly created movie",
            "type": "integer",
            "example": 6
          },
          "title": {
            "type": "string",
            "example": "Avengers End Game",
            "default": "Avengers End Game"
          },
          "year": {
            "description": "The year of th emovie",
            "type": "integer",
            "example": 1,
            "default": 1
          },
          "time": {
            "description": "The duration of the movie in minutes",
            "type": "string",
            "example": 120
          },
          "language": {
            "description": "The language the movie is originally in",
            "type": "string",
            "example": "English"
          },
          "distributor": {
            "description": "The distributor of the movie",
            "type": "string",
            "example": "Universal Pictures"
          }
        }
      },
      "RevieBadResponse": {
        "type": "object",
        "properties": {
          "data": {
            "description": "The data that was requested. null if any issue requesting it",
            "type": "string",
            "example": null
          },
          "success": {
            "description": "The requested operation was successful",
            "type": "boolean",
            "example": false
          },
          "errorCode": {
            "description": "An error code of an error that happened while requesting the data",
            "type": "string",
            "example": "MOVIE_NOT_FOUND"
          },
          "errorMessages": {
            "description": "The detailed message of the error that happened",
            "type": "array",
            "items": {
              "example": "Movie with the specified id was not found"
            }
          }
        }
      },
      "DisableMovieResponse": {
        "type": "object",
        "properties": {
          "data": {
            "description": "The data that was requested. null if any issue requesting it",
            "type": "string",
            "example": {
              "disabled": true
            }
          },
          "success": {
            "description": "The requested operation was successful",
            "type": "boolean",
            "example": true
          },
          "errorCode": {
            "description": "An error code of an error that happened while requesting the data",
            "type": "string",
            "example": null
          },
          "errorMessages": {
            "description": "The detailed message of the error that happened",
            "type": "array",
            "items": {
              "example": ""
            }
          }
        }
      },
      "DisableMovieBadResponse": {
        "type": "object",
        "properties": {
          "data": {
            "description": "The data that was requested. null if any issue requesting it",
            "type": "string",
            "example": null
          },
          "success": {
            "description": "The requested operation was successful",
            "type": "boolean",
            "example": false
          },
          "errorCode": {
            "description": "An error code of an error that happened while requesting the data",
            "type": "string",
            "example": "MOVIE_NOT_FOUND"
          },
          "errorMessages": {
            "description": "The detailed message of the error that happened",
            "type": "array",
            "items": {
              "example": "Invalid movie id"
            }
          }
        }
      },
      "ActionDirectorCreationPayload": {
        "type": "object",
        "required": ["firstName", "lastName"],
        "properties": {
          "firstName": {
            "type": "string",
            "example": "Jeremy"
          },
          "lastName": {
            "type": "string",
            "example": "Then"
          }
        }
      },
      "ActionDirectorData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 2
          },
          "firstName": {
            "type": "string",
            "example": "Jeremy"
          },
          "lastName": {
            "type": "string",
            "example": "Then"
          }
        }
      },
      "AddActorBadResponse": {
        "type": "object",
        "properties": {
          "data": {
            "description": "The data that was requested. null if any issue requesting it",
            "type": "string",
            "example": null
          },
          "success": {
            "description": "The requested operation was successful",
            "type": "boolean",
            "example": false
          },
          "errorCode": {
            "description": "An error code of an error that happened while requesting the data",
            "type": "string",
            "example": "ACTOR_INVALID_PAYLOAD"
          },
          "errorMessages": {
            "description": "The detailed message of the error that happened",
            "type": "array",
            "items": {
              "example": "Actor's first name is required"
            }
          }
        }
      },
      "DeleteActorBadResponse": {
        "type": "object",
        "properties": {
          "data": {
            "description": "The data that was requested. null if any issue requesting it",
            "type": "string",
            "example": null
          },
          "success": {
            "description": "The requested operation was successful",
            "type": "boolean",
            "example": false
          },
          "errorCode": {
            "description": "An error code of an error that happened while requesting the data",
            "type": "string",
            "example": "ACTOR_NOT_FOUND"
          },
          "errorMessages": {
            "description": "Detailed messages of the errors that happened",
            "type": "array",
            "items": {
              "example": "Actor with id 1 was not found"
            }
          }
        }
      },
      "UnkownError": {
        "type": "object",
        "properties": {
          "data": {
            "description": "The data that was requested. null if any issue requesting it",
            "type": "string",
            "example": null
          },
          "success": {
            "description": "The requested operation was successful",
            "type": "boolean",
            "example": false
          },
          "errorCode": {
            "description": "An error code of an error that happened while requesting the data",
            "type": "string",
            "example": "UNKNOWN_ERROR"
          },
          "errorMessages": {
            "description": "Detailed messages of the errors that happened",
            "type": "array",
            "items": {
              "example": "There was an error with your request. Try again later."
            }
          }
        }
      },
      "AddReviewResponse": {
        "type": "object",
        "properties": {
          "data": {
            "description": "The data that was requested. null if any issue requesting it",
            "type": "object",
            "properties": {
              "review": {
                "type": "object",
                "$ref": "#/components/schemas/Review"
              }
            }
          },
          "success": {
            "description": "The requested operation was successful",
            "type": "boolean",
            "example": true
          },
          "errorCode": {
            "description": "An error code of an error that happened while requesting the data",
            "type": "string",
            "example": ""
          },
          "errorMessages": {
            "description": "Detailed messages of the errors that happened",
            "type": "array",
            "items": {
              "example": ""
            }
          }
        }
      },
      "GetMoviesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "description": "The data that was requested. null if any issue requesting it",
            "type": "object",
            "properties": {
              "movies": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Movie"
                }
              }
            }
          },
          "success": {
            "description": "The requested operation was successful",
            "type": "boolean",
            "example": true
          },
          "errorCode": {
            "description": "An error code of an error that happened while requesting the data",
            "type": "string",
            "example": ""
          },
          "errorMessages": {
            "description": "Detailed messages of the errors that happened",
            "type": "array",
            "items": {
              "example": ""
            }
          }
        }
      },
      "AddMovieResponse": {
        "type": "object",
        "properties": {
          "data": {
            "description": "The data that was requested. null if any issue requesting it",
            "type": "object",
            "properties": {
              "movie": {
                "type": "object",
                "$ref": "#/components/schemas/NewMovieCreated"
              }
            }
          },
          "success": {
            "description": "The requested operation was successful",
            "type": "boolean",
            "example": true
          },
          "errorCode": {
            "description": "An error code of an error that happened while requesting the data",
            "type": "string",
            "example": ""
          },
          "errorMessages": {
            "description": "Detailed messages of the errors that happened",
            "type": "array",
            "items": {
              "example": ""
            }
          }
        }
      },
      "GetMovieByIdResponse": {
        "type": "object",
        "properties": {
          "data": {
            "description": "The data that was requested. null if any issue requesting it",
            "type": "object",
            "properties": {
              "movie": {
                "type": "object",
                "$ref": "#/components/schemas/Movie"
              }
            }
          },
          "success": {
            "description": "The requested operation was successful",
            "type": "boolean",
            "example": true
          },
          "errorCode": {
            "description": "An error code of an error that happened while requesting the data",
            "type": "string",
            "example": ""
          },
          "errorMessages": {
            "description": "Detailed messages of the errors that happened",
            "type": "array",
            "items": {
              "example": ""
            }
          }
        }
      },
      "GetMovieReviewsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "description": "The data that was requested",
            "type": "object",
            "properties": {
              "review": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Review"
                }
              }
            }
          },
          "success": {
            "description": "The requested operation was successful",
            "type": "boolean",
            "example": true
          },
          "errorCode": {
            "description": "An error code of an error that happened while requesting the data",
            "type": "string",
            "example": ""
          },
          "errorMessages": {
            "description": "Detailed messages of the errors that happened",
            "type": "array",
            "items": {
              "example": ""
            }
          }
        }
      },
      "UserRegisterLoginResponse": {
        "type": "object",
        "properties": {
          "data": {
            "description": "The data that was requested",
            "type": "object",
            "properties": {
              "user": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RegisterUserResponsePayload"
                }
              },
              "token": {
                "description": "The JWT token that can be used by the user to make calls to the api or to be 'logged in'",
                "type": "string",
                "example": "jwttoten"
              }
            }
          },
          "success": {
            "description": "The requested operation was successful",
            "type": "boolean",
            "example": true
          },
          "errorCode": {
            "description": "An error code of an error that happened while requesting the data",
            "type": "string",
            "example": ""
          },
          "errorMessages": {
            "description": "Detailed messages of the errors that happened",
            "type": "array",
            "items": {
              "example": ""
            }
          }
        }
      },
      "GetUsersResponse": {
        "type": "object",
        "properties": {
          "data": {
            "description": "The data that was requested",
            "type": "object",
            "properties": {
              "users": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RegisterUserResponsePayload"
                }
              }
            }
          },
          "success": {
            "description": "The requested operation was successful",
            "type": "boolean",
            "example": true
          },
          "errorCode": {
            "description": "An error code of an error that happened while requesting the data",
            "type": "string",
            "example": ""
          },
          "errorMessages": {
            "description": "Detailed messages of the errors that happened",
            "type": "array",
            "items": {
              "example": ""
            }
          }
        }
      }
    }
  }
}
